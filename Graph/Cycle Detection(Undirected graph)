#include <bits/stdc++.h>
using namespace std;

bool isCycle(vector<vector<int>> &graph, int s, vector<bool> &vis)
{
    int n = graph.size();
    vector<int> parent(n, -1);
    queue<pair<int, int>> q;
    vis[s] = true;
    q.push({s, -1});
    while (!q.empty())
    {
        int node = q.front().first;
        int par = q.front().second;
        q.pop();
        for (auto neigh : graph[node])
        {
            if (!vis[neigh])
            {
                vis[neigh] = true;
                q.push({neigh, node});
            }
            else if (par != neigh)
            {
                return true;
            }
        }
    }
    return false;
}
bool detectCycle(vector<vector<int>> &graph)
{
    int n = graph.size();
    vector<bool> vis(n, false);
    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
            if (isCycle(graph, i, vis))
                return true;
    }
    return false;
}

int main()
{
    int n, e;
    cout << "Enter the Number of Nodes and number of Edges : " << endl;
    cin >> n >> e;
    vector<vector<int>> graph(n);
    for (int i = 0; i < e; i++)
    {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    bool cycle = detectCycle(graph);
    if (cycle)
    {
        cout << "Cycle is present in graph " << endl;
    }
    else
        cout << "Cycle is not  present in graph " << endl;
    return 0;
}
