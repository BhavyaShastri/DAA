// Given the weights and values of n items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
// In the 0 -
// 1 Knapsack problem,
//  we are not allowed to break items.We either take the whole item or donâ€™t take it.

#include <bits/stdc++.h>
using namespace std;

bool comp(pair<int, int> a, pair<int, int> b)
{
    return (a.second / a.first) > (b.second / b.first);
}

int fractionalKnapsack(int W, vector<pair<float, float>> &arr)
{
    int n = arr.size();
    // sort in decreasing order
    sort(arr.begin(), arr.end(), comp);

    int totalValue = 0;

    for (int i = 0; i < n; i++)
    {
        if (arr[i].first <= W)
        {
            W -= arr[i].first;
            totalValue += arr[i].second;
        }
        else
        {
            totalValue += arr[i].second * (W / arr[i].first);
            break;
        }
    }
    return totalValue;
}

int main()
{
    int W, n;
    cout << "Enter the weight of Knapsack : " << endl;
    cin >> W;
    cout << "Enter the number of elements of array : " << endl;
    cin >> n;

    // weight and value
    vector<pair<float, float>> arr(n);

    // ratio and weight

    for (int i = 0; i < n; i++)
    {
        cout << "Enter the weight and Value of  item : " << endl;
        // weight and value
        cin >> arr[i].first >> arr[i].second;
    }

    int ans = fractionalKnapsack(W, arr);

    cout << ans << endl;

    return 0;
}
